# 1 input 8 character
# 2 split into 2 part (4 character each)
# 3 like this:
#  Left(L0)               Right(R0)
#  32 bits                32 bits
# 4 encode R0 using F function -> Fs(R0) -> hasil: E
# 5
# L1 = R0
# R1 = E xor L0
# 6 concate L1 + R1

sbox = [0x57, 0x49, 0xd1, 0xc6, 0x2f, 0x33, 0x74, 0xfb,
        0x95, 0x6d, 0x82, 0xea, 0x0e, 0xb0, 0xa8, 0x1c,
        0x28, 0xd0, 0x4b, 0x92, 0x5c, 0xee, 0x85, 0xb1,
        0xc4, 0x0a, 0x76, 0x3d, 0x63, 0xf9, 0x17, 0xaf,
        0xbf, 0xa1, 0x19, 0x65, 0xf7, 0x7a, 0x32, 0x20,
        0x06, 0xce, 0xe4, 0x83, 0x9d, 0x5b, 0x4c, 0xd8,
        0x42, 0x5d, 0x2e, 0xe8, 0xd4, 0x9b, 0x0f, 0x13,
        0x3c, 0x89, 0x67, 0xc0, 0x71, 0xaa, 0xb6, 0xf5,
        0xa4, 0xbe, 0xfd, 0x8c, 0x12, 0x00, 0x97, 0xda,
        0x78, 0xe1, 0xcf, 0x6b, 0x39, 0x43, 0x55, 0x26,
        0x30, 0x98, 0xcc, 0xdd, 0xeb, 0x54, 0xb3, 0x8f,
        0x4e, 0x16, 0xfa, 0x22, 0xa5, 0x77, 0x09, 0x61,
        0xd6, 0x2a, 0x53, 0x37, 0x45, 0xc1, 0x6c, 0xae,
        0xef, 0x70, 0x08, 0x99, 0x8b, 0x1d, 0xf2, 0xb4,
        0xe9, 0xc7, 0x9f, 0x4a, 0x31, 0x25, 0xfe, 0x7c,
        0xd3, 0xa2, 0xbd, 0x56, 0x14, 0x88, 0x60, 0x0b,
        0xcd, 0xe2, 0x34, 0x50, 0x9e, 0xdc, 0x11, 0x05,
        0x2b, 0xb7, 0xa9, 0x48, 0xff, 0x66, 0x8a, 0x73,
        0x03, 0x75, 0x86, 0xf1, 0x6a, 0xa7, 0x40, 0xc2,
        0xb9, 0x2c, 0xdb, 0x1f, 0x58, 0x94, 0x3e, 0xed,
        0xfc, 0x1b, 0xa0, 0x04, 0xb8, 0x8d, 0xe6, 0x59,
        0x62, 0x93, 0x35, 0x7e, 0xca, 0x21, 0xdf, 0x47,
        0x15, 0xf3, 0xba, 0x7f, 0xa6, 0x69, 0xc8, 0x4d,
        0x87, 0x3b, 0x9c, 0x01, 0xe0, 0xde, 0x24, 0x52,
        0x7b, 0x0c, 0x68, 0x1e, 0x80, 0xb2, 0x5a, 0xe7,
        0xad, 0xd5, 0x23, 0xf4, 0x46, 0x3f, 0x91, 0xc9,
        0x6e, 0x84, 0x72, 0xbb, 0x0d, 0x18, 0xd9, 0x96,
        0xf0, 0x5f, 0x41, 0xac, 0x27, 0xc5, 0xe3, 0x3a,
        0x81, 0x6f, 0x07, 0xa3, 0x79, 0xf6, 0x2d, 0x38,
        0x1a, 0x44, 0x5e, 0xb5, 0xd2, 0xec, 0xcb, 0x90,
        0x9a, 0x36, 0xe5, 0x29, 0xc3, 0x4f, 0xab, 0x64,
        0x51, 0xf8, 0x10, 0xd7, 0xbc, 0x02, 0x7d, 0x8e]

while True:
    plaintext = input("input plaintext: ")
    key_feistel = input("input key: ")
    border: str = "ini border"
    print(f"{border:-^30}")

    plaintext = [i.encode(encoding="ascii").hex() for i in plaintext]
    key_feistel = [i.encode(encoding="ascii").hex() for i in key_feistel]

    if len(plaintext) > 8:
        print(f"> len text: {len(plaintext)}")
        print("> input reach max limit (8 char)")

    elif len(plaintext) < 8:
        for i in range(len(plaintext), 8):
            plaintext.append("00")
        break

    elif len(plaintext) == 8:
        break
# -------------------------------------------------------


def split(plain: list):
    temp = [i for i in plain[:len(plain)//2]]
    temp2 = [i for i in plain[len(plain)//2:]]
    return temp, temp2


# def key_processing(key: list):
if len(key_feistel) < 8:
    for i in range(len(key_feistel), 8):
        key_feistel.append("00")


# def generate_key(prev_Key, prev_F_function):
#     temp = []
#     for i in range(4):
#         temp.append(prev_Key[i] ^ prev_F_function[i])
#     return temp

# generate_key


def generate_key(prev_key):
    sub = []
    for i in range(4):
        sub.append(sbox[prev_key[i]])

    # kalau ingin bentuk hexnya, tinggal add return nya
    sub_to_hex = [hex(x)[2:] for x in sub]
    return sub


def f_func(state, key):
    temp = []
    for i in range(4):
        temp.append(state[i] ^ key[i])
    return temp


# -------------------------------------------------------

# plaintext = [i for i in plaintext]
# print(plaintext)


plaintext = [int(i, base=16) for i in plaintext]
key_feistel = [int(i, base=16) for i in key_feistel]

print(f"plaintext: {plaintext}")
print(f"len plain: {len(plaintext)}")

print(f"key: {key_feistel}")
print(f"len key: {len(key_feistel)}")
print(f"{border:-^30}")


key_process = []
keyL, keyR = split(key_feistel)
for i in range(4):
    hasil = keyL[i] ^ keyR[i]
    key_process.append(hasil)

key0 = key_process


# pre_key = key_processing(key_feistel)
# print(f"key-1: {pre_key}")


L0, R0 = split(plaintext)
print(f"L0: {L0}")
print(f"R0: {R0}")
print(f"key-0: {key0}")


def swap(L, R, f_function):
    l_new = R
    r_new = []
    for i in range(4):
        temp = L[i] ^ f_function[i]
        r_new.append(temp)
    return l_new, r_new


# generate F_function - 1
f0 = f_func(R0, key0)
L1, R1 = swap(L0, R0, f0)

print(f"L1: {L1}")
print(f"R1: {R1}")

print(f"gabungan: {L1 + R1}")

print(f"{border:-^30}")

# ROUND - 2
key1 = generate_key(key0)
f1 = f_func(R1, key1)
L2, R2 = swap(L1, R1, f1)
print(f"key-1: {key1}")
print(f"f1: {f1}")
print(f"L2: {L2}")
print(f"R2: {R2}")
print(f"gabungan: {L2 + R2}")

# ROUND - 3
key2 = generate_key(key1)
f2 = f_func(R2, key2)
L3, R3 = swap(L2, R2, f2)
print(f"key-2: {key2}")
print(f"f2: {f2}")
print(f"L3: {L3}")
print(f"R3: {R3}")
print(f"gabungan: {L3 + R3}")
